---
- name: Install Docker and plugins + Manage Docker as a non-root user 
  hosts: localhost
  become: true
  vars:
    running_user_access: 'true'
    add_users_access: 'false'
  tasks:
    - name: Update & upgrade system
      apt: 
        update_cache: yes
        upgrade: dist

    - name: Uninstall old versions
      apt: 
        name: "{{ item }}"
        state: absent
        purge: yes
      loop: [docker-doc, docker.io, docker-compose, docker-compose-v2, podman-docker, containerd, run, docker-ce, docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin, docker-ce-rootless-extras]

    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - ca-certificates
        - software-properties-common
        - apt-transport-https

    - name: Add docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg 
        dest: /etc/apt/keyrings/docker.asc
        mode: '0755'
        force: true

    - name: Get architecture
      command: dpkg --print-architecture
      register: architecture

    - name: Add Docker APT repository
      apt_repository:
        filename: docker
        repo: "deb [arch={{ architecture.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: install docker and docker compose 
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Start docker engine
      service:
        name: docker
        state: started
        enabled: yes

  #Manage non-root access
    - name: Add docker group
      group:
        name: docker
        state: present
      when: running_user_access == 'true' or add_users_access == 'true' 

    #Add non-root access for running user
    - name: get username
      command: echo $USER 
      become: false
      register: USER
      when: running_user_access == 'true'

    - name: Add running user to docker group
      user:
        name: "{{ USER.stdout }}"
        groups: docker
        append: true
      when: running_user_access == 'true'

    #Add non-root access for other users.
    - name: Include user_name's File
      include_vars:
        file: ./users.yml
      when: add_users_access == 'true'

    - name: Add users to docker group
      user: 
        name: "{{ item }}"
        groups: docker 
        append: true
      loop: "{{ users }}"
      when: add_users_access == 'true'




